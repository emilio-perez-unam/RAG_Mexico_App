version: '3.8'

services:
  # Main Flutter Web Application
  legal-rag-web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
        - SUPABASE_URL=${SUPABASE_URL}
        - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
        - MILVUS_HOST=${MILVUS_HOST:-milvus}
        - MILVUS_PORT=${MILVUS_PORT:-19530}
        - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
        - APP_ENV=${APP_ENV:-production}
    image: legal-rag-mexico:latest
    container_name: legal-rag-web
    restart: unless-stopped
    ports:
      - "${APP_PORT:-80}:80"
    environment:
      - TZ=America/Mexico_City
    networks:
      - legal-rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy with SSL (Production)
  nginx-proxy:
    image: nginx:alpine
    container_name: legal-rag-proxy
    restart: unless-stopped
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./certbot/conf:/etc/letsencrypt:ro
    depends_on:
      - legal-rag-web
    networks:
      - legal-rag-network
    profiles:
      - production

  # Certbot for SSL certificates (Production)
  certbot:
    image: certbot/certbot
    container_name: legal-rag-certbot
    volumes:
      - ./certbot/www:/var/www/certbot:rw
      - ./certbot/conf:/etc/letsencrypt:rw
    profiles:
      - production
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Redis for caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: legal-rag-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - legal-rag-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-your_redis_password}
    profiles:
      - cache

  # Milvus Vector Database (Development/Self-hosted)
  milvus-etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: milvus-etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd-data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - legal-rag-network
    profiles:
      - milvus

  milvus-minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: milvus-minio
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      - minio-data:/minio_data
    command: minio server /minio_data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - legal-rag-network
    profiles:
      - milvus

  milvus-standalone:
    image: milvusdb/milvus:v2.3.3
    container_name: milvus-standalone
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: milvus-etcd:2379
      MINIO_ADDRESS: milvus-minio:9000
    volumes:
      - milvus-data:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - milvus-etcd
      - milvus-minio
    networks:
      - legal-rag-network
    profiles:
      - milvus

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: legal-rag-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - legal-rag-network
    profiles:
      - monitoring

  # Grafana for visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: legal-rag-grafana
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel
    ports:
      - "3000:3000"
    networks:
      - legal-rag-network
    profiles:
      - monitoring

networks:
  legal-rag-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  redis-data:
    driver: local
  etcd-data:
    driver: local
  minio-data:
    driver: local
  milvus-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
version: '3.8'

networks:
  legalrag-network:
    driver: bridge

volumes:
  milvus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/data/milvus
  
  etcd_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/data/etcd
  
  minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/data/minio

services:
  # Main RAG API Service
  rag-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: legalrag-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - MILVUS_HOST=milvus-standalone
      - MILVUS_PORT=19530
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGINS=${CORS_ORIGINS:-https://yourusername.github.io}
      - APP_ENV=${APP_ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      milvus-standalone:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - /mnt/data/uploads:/app/uploads
      - /mnt/data/logs:/app/logs
      - ./config:/app/config:ro
    networks:
      - legalrag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Milvus Standalone (simpler than cluster for single server)
  milvus-standalone:
    image: milvusdb/milvus:v2.3.3
    container_name: legalrag-milvus
    restart: unless-stopped
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MILVUS_LOG_LEVEL=warning
    ports:
      - "19530:19530"
      - "9091:9091"
    volumes:
      - milvus_data:/var/lib/milvus
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - legalrag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 90s

  # etcd for Milvus metadata
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: legalrag-etcd
    restart: unless-stopped
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd 
      -advertise-client-urls=http://127.0.0.1:2379 
      -listen-client-urls=http://0.0.0.0:2379 
      --data-dir=/etcd
    networks:
      - legalrag-network
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO for Milvus object storage
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: legalrag-minio
    restart: unless-stopped
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    ports:
      - "9001:9001"
    volumes:
      - minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    networks:
      - legalrag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: legalrag-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - /mnt/data/redis:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - legalrag-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: legalrag-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot:ro
    depends_on:
      - rag-api
    networks:
      - legalrag-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3